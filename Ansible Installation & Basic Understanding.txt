## Installation of Ansible on RHEL ##

# subscription-manager status
# subscription-manager register
# subscription-manager repos
# subscription-manager status
# subscription-manager auto-attach
# yum repolist all
# subscription-manager repos --enable rhel-7-server-extras-rpms
# yum repolist enabled
# yum info ansible
# yum install ansible -y

## Check/Verify Ansible installation ##

# ansible --version
ansible 2.4.2.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/root/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.5 (default, May  3 2017, 07:55:04) [GCC 4.8.5 20150623 (Red Hat 4.8.5-14)]

## Ansible environment setup ##

Default : /etc/ansible/ansible.cfg
inventory      = /etc/ansible/hosts
roles_path    = /etc/ansible/roles:/usr/share/ansible/roles

Priority of ansible configuration files:
ANSIBLE_CONFIG (Environment variable)
ansible.cfg (Inside the current directory where the commands are ran)
.ansible.cfg (Inside users home directory)
/etc/ansible/ansible.cfg

## Ansible Inventory ##

Default : /etc/ansible/hosts
Inventory files are written in INI format & ansible inventory supports host variables, group variables and groups of group.

* Example of specific inventory:
# cat inventory.txt
[lab_hosts]
ansible-node1  ansible_user=root  ansible_hostname=ansible-node1
ansible-node2  ansible_user=root  ansible_hostname=ansible-node2

* Example of default inventory:
[labservers]
ansible-node1 ansible_user=root
ansible-node2 ansible_user=root

[webservers]
ansible-node1 ansible_user=root

[dbservers]
ansible-node2 ansible_user=root

[localhosts]
localhost ansible_connection=local ansible_python_interpreter=python

* Setup passwordless authentication from Ansible controller node(For AWS use the .pem file):
# ssh-keygen -t rsa
# cat ~/.ssh/id_rsa.pub | ssh root@ansible-node1 'cat >> .ssh/authorized_keys'
# cat ~/.ssh/id_rsa.pub | ssh root@ansible-node2 'cat >> .ssh/authorized_keys'
# ssh root@ansible-node1 "chmod go-rwx ~/.ssh ~/.ssh/authorized_keys"
# ssh root@ansible-node2 "chmod go-rwx ~/.ssh ~/.ssh/authorized_keys"

	For AWS:
	#eval `ssh-agent -s`
	#ssh-add MyKey.pem

* Check ansible setup:
# ansible -m ping all => Ping all hosts defined under /etc/ansible/hosts
localhost | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
ansible-node1 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
ansible-node2 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

# ansible lab_hosts -m ping -i inventory.txt => Ping only a host group defined under inventory.txt
ansible-node1 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
ansible-node2 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

# ansible dbservers -m ping -i inventory.txt => Ping only a host group defined under inventory.txt
ansible-node2 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
# ansible webservers -m ping -i inventory.txt => Ping only a host group defined under inventory.txt
ansible-node1 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

# ansible -m setup all => Check all hardware & other info

## Ansible ad-hoc commands ##

* Format:
# ansible <HOSTNAME/LIST OF SERVERS> -m <ANSIBLE MODULE> -a <MODULE ARGUMENTS>

# ansible labservers -m command -a "uptime" -i inventory.txt
ansible-node1 | SUCCESS | rc=0 >>
 16:17:42 up 34 min,  2 users,  load average: 0.00, 0.00, 0.00

ansible-node2 | SUCCESS | rc=0 >>
 16:17:43 up 34 min,  2 users,  load average: 0.00, 0.00, 0.00

# ansible labservers -m command -a "uptime" -f 10 -i inventory.txt => For parallel runs i.e multiple hosts at a single time(using forks), run the command using "-f" option
ansible-node2 | SUCCESS | rc=0 >>
 16:19:47 up 36 min,  2 users,  load average: 0.00, 0.00, 0.00

ansible-node1 | SUCCESS | rc=0 >>
 16:19:46 up 36 min,  2 users,  load average: 0.00, 0.00, 0.00


# ansible labservers -m copy -a "src=test.txt dest=/tmp/test.txt" -i inventory.txt => Copy file test.txt to nodes from group labservers(Disable selinux or install libselinux-python)
ansible-node1 | SUCCESS => {
    "changed": true,
    "checksum": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dest": "/tmp/test.txt",
    "gid": 0,
    "group": "root",
    "md5sum": "d41d8cd98f00b204e9800998ecf8427e",
    "mode": "0644",
    "owner": "root",
    "size": 0,
    "src": "/root/.ansible/tmp/ansible-tmp-1519191036.01-280787496406350/source",
    "state": "file",
    "uid": 0
}
ansible-node2 | SUCCESS => {
    "changed": true,
    "checksum": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
    "dest": "/tmp/test.txt",
    "gid": 0,
    "group": "root",
    "md5sum": "d41d8cd98f00b204e9800998ecf8427e",
    "mode": "0644",
    "owner": "root",
    "size": 0,
    "src": "/root/.ansible/tmp/ansible-tmp-1519191036.0-249749878035096/source",
    "state": "file",
    "uid": 0
}

# ansible labservers -m command -a "rm -f /tmp/test.txt" -i inventory.txt => Removes the test.txt file from labservers group copied in earlier step

* Check all available modules in ansible:
# ansible-doc -l

## Ansible Facts ##

Facts are details or information derived from remote hosts & can be used as variables in Ansible Playbooks

* Gather all facts from all systems:
# ansible all -m setup => Might take time depending on your list of servers & shall generate enormous amount of data!

*Gather kernel information from remote host group called labservers
# ansible labservers -m setup -i inventory.txt | grep kernel
        "ansible_kernel": "2.6.32-696.20.1.el6.x86_64",
        "ansible_kernel": "2.6.32-696.20.1.el6.x86_64",
		
*Gather virtual network interface information from remote host group called labservers
# ansible all -m setup -a 'gather_subset=network filter=ansible_all_ipv4_addresses' -i inventory.txt
ansible-node2 | SUCCESS => {
    "ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "192.168.16.61"
        ]
    },
    "changed": false
}
ansible-node1 | SUCCESS => {
    "ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "192.168.16.60"
        ]
    },
    "changed": false
}

## Ansible Variable ##

Ansible variable is a temporary placeholder for a piece of data in computers memory.

* Valid variable naming convention:
	- Cannot use "-" (hyphen)
	- Can be alphanumeric
	- Should start with an alphabet
	- No spaces
	
## Ansible Sections ##

Ansible sections are the sections we need to write in a playbook.

* Sections:
	- Target section (Mandatory)
	- Variable section
	- Task section (Mandatory)
	- Handler section
	- Loop section
	- Conditional section
	- Until section
	- Notify section

## Ansible Playbook ##

* Sample ansible playbook to install HTTPD
---
- hosts: labservers
  gather_facts: false
  vars:
   - package1: 'nmap'
  tasks:
   - name: Installing nmap package
     yum: name={{package1}} state=present
	 
* Run the playbook 
# ansible-playbook install_software.yml -i inventory.txt

* To stop gathering facts from hosts on every playbook run
---
- hosts: labservers
  gather_facts: false
  vars:
   - package1: 'nmap'
  tasks:
   - name: Installing nmap package
     yum: name={{package1}} state=present

* To run a playbook with elevated privileges(where "root" user login is not permitted):
# ansible-playbook install_software.yml -i inventory.txt -b

* Sample Apache Webserver installation playbook(available in repository):
# Check install_httpd.yml file

## Ansible Handlers & Templates section ##

Handlers are lists of tasks, not really any different from regular tasks, that are referenced by a globally unique name, and are notified by notifiers.
Ansible uses Jinja2 templating to enable dynamic expressions and access to variables. It has a .j2 extension.

* Sample template file(available in repository):
# cat new_index.html.j2
<html><h1>This is a test webpage running from {{ ansible_hostname }} </h1></html>

* Updated Apache Webserver installation playbook with handler & template(available in repository):
# Check install_httpd_updated.yml file
# Run the playbook and browse to http://IP/new_index.html

## Ansible Playbook Debug section ##

Debugging helps to understand any causes of failure within a playbook.

* Sample debug playbook(available in repository):
# Check debug.yml
# Check debug_updated.yml

## Ansible Loops section ##

Ansible loops are used to do many tasks under a single task. It repeats itself till a state is achieved.

* Sample playbook with loops(available in repository):
# Check ansible_loops.yml for Ansible loops example.

## Ansible Conditionals and Until section ##

* Sample playbook with conditionals(available in repository):
# Check ansible_conditional.yml for Ansible conditional example.
# Check ansible_until.yml for Ansible until example.

## Ansible Vault ##

Ansible vault is a feature of ansible that allows keeping sensitive data such as passwords or keys in encrypted files, rather than as plaintext in your playbooks or roles.

* Create a vault file
# ansible-vault create ansible_vault.yml
New Vault password:
Confirm New Vault password:

* Check contents of vault file
# ansible-vault view ansible_vault.yml
Vault password:
# Sample playbook with vault enabled

## Ansible Roles ##

An Ansible role is basically a broken apart playbook. It takes the sections of the playbook and breaks them into several different files.

* Sample Ansible Role directory structure:
test-role/
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── README.md
├── tasks
│   └── main.yml
├── templates
├── tests
│   ├── inventory
│   └── test.yml
└── vars
    └── main.yml

8 directories, 8 files

* To create a role:
# ansible-galaxy init test-role

* Sample playbook to deploy a Wordpress Site(available under repository) using roles - server, mysql, php & wordpress:
# Check install-wordpress from repository.


